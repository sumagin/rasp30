.include "pmem_defs.asm"
	
.set	DAC_01_00, 0x01D0
.set	DAC_03_02, 0x01D2
.set	DAC_05_04, 0x01D4
.set	DAC_07_06, 0x01D6
.set	DAC_09_08, 0x01D8

.global main

main:
        mov     #DMEM_250, r1           ; Initialize stack pointer
	mov	#0x6000, r7
        mov	#0x0010, &BCSCTL2	; Divide clock 20MHz
	mov	#0x5A80, &WDTCTL	; Watchdog controller 
	dint
        mov     #0x0064, &GP_PER_1      ; sel_avd_25 = On, IVDD to 2.5V, Set vtun_ext = On
	mov	#0x0002, &TUN_MUX
 	mov     #0, &ROW_SEL
        mov     #0, &COL_SEL
	mov	#0x0000, &GATE_S	; gate_s = 0.6V (@ IVDD 2.5V)
	;mov	#0x0040, &GATE_S	; gate_s = gnd
	mov	#0x0000, &GATE_US_P	; gate_us_p = 0.6V (@ IVDD 2.5V)
	;mov	#0x0040, &GATE_US_P	; gate_us_p = gnd
	;mov	#0x0000, &GATE_US_N	; gate_us_n = 0.6V (@ IVDD 2.5V)
	mov	#0x0040, &GATE_US_N	; gate_us_n = gnd
	;mov     #0xBF04, &GP_PER_3      ; Vtun_ext = 5V, enable 6V, esd=6v, dvdd2.5=On,

        mov     #0x3F04, &GP_PER_3      ; Vtun_ext = 5V, enable 6V, esd=6v, dvdd2.5=On, loc_dreset=1,
        mov     #1, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function

	mov     #0x1F04, &GP_PER_3      ; Vtun_ext = 5V, enable 6V, esd=6v, dvdd2.5=On, loc_dreset=0,
					; adc_pwd<1> = 0 (ADC_0, 0: normal, 1: power down)
;	mov	#0x00A4, &DRAIN_CTRL	; 101 cascode off, no use DAC, i2v mux control=fg_inn
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
	mov     #0x0000, &PROG_BITS     ; PROG = 0, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0

	mov     #50, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function

        mov     #1, r15

        mov	#0x4300, r11
	mov	@r11, r12		; length of vector 
	incd	r11
	mov	@r11, r13		; DAC information
	incd	r11
	mov	@r11, r14		; Time interval (ms)
loop_start:

        mov     r13, r9
	bic	#0xfffc, r9
        cmp	#0, r9  	        ; If DAC0 = 0 & DAC1 =0, skip setting DAC0 & DAC1
	jeq	skip_DAC1DAC0_set
        incd	r11
        mov     @r11, &DAC_01_00        ; get the DAC_01_00's value
skip_DAC1DAC0_set:

        mov     r13, r9
	bic	#0xfff3, r9
        cmp	#0, r9  	        ; If DAC2 = 0 & DAC3 = 0, skip setting DAC2 & DAC3
	jeq	skip_DAC3DAC2_set
        incd	r11
        mov     @r11, &DAC_03_02        ; get the DAC_03_02's value
skip_DAC3DAC2_set:
      
        mov     r13, r9
	bic	#0xffcf, r9
        cmp	#0, r9  	        ; If DAC4 = 0 & DAC5 = 0, skip setting DAC4 & DAC5
	jeq	skip_DAC5DAC4_set
        incd	r11
        mov     @r11, &DAC_05_04        ; get the DAC_05_04's value
skip_DAC5DAC4_set:
   
        mov     r13, r9
    	bic	#0xff3f, r9
        cmp	#0, r9  	        ; If DAC6 = 0 & DAC7 = 0, skip setting DAC6 & DAC7
	jeq	skip_DAC7DAC6_set
        incd	r11
        mov     @r11, &DAC_07_06        ; get the DAC_07_06's value
skip_DAC7DAC6_set:
      
        mov     r13, r9
    	bic	#0xfcff, r9
        cmp	#0, r9  	        ; If DAC8 = 0 & DAC9 = 0, skip setting DAC8 & DAC9
	jeq	skip_DAC9DAC8_set
        incd	r11
        mov     @r11, &DAC_09_08        ; get the DAC_09_08's value
skip_DAC9DAC8_set:
  
        mov     r14, r5             	; Number of ms
	cmp	#0, r5
	jeq	wait_skip
        ;call    #wait_ms                ; Call the waiting function
        call    #wait_10us                ; Call the waiting function
wait_skip:

        cmp     #0, r15
        jeq     initial_wait_skip
	mov     #20, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
        sub     #1, r15
initial_wait_skip:

;	mov	#0x4200, r8
;	mov	@r8, r15		; No. of FGs 
;measure_start:
;	incd	r8
;	mov     @r8,    &ROW_SEL
;	incd	r8
;        mov     @r8,    &COL_SEL
;
;	mov     #0x0000, &PROG_BITS     ; PROG = 0, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
;        mov     #0x3000, &PROG_BITS     ; PROG = 0, OV_N = don't care, MEAS_ADC = 1, CLEAR_N = 1
;        mov     #5, r5             	; Number of ms
;	call    #wait_ms                ; Call the waiting function
;        mov     #0, &ADC                ; Write counter value into ADC via dummy write
;	mov     &ADC, @r7	        ; Get value in counter
;        incd	r7
;        dec.w   r15
;        jz      measure_end
;	jmp	measure_start
;measure_end:
        dec.w   r12
        jz      loop_end
	jmp	loop_start
loop_end:
        mov	#0xFFFF, @r7		; Data End

        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	mov	#0x0000, &BCSCTL2
	nop
	br #0xffff

wait_ms:
        mov     #3324, r4               ; Number of clock cycles in a ms (chariterized by pulse measure)
        mov     r4, r6                  ; Get number of inner loop iterations
wait_loop:
        dec.w   r6                      ; Subtract from number of clk cycles.Execution takes 2 clock cycles
        jnz     wait_loop               ; Test for loop termination. Execution takes 2 clock cycles
        mov     r4, r6                  ; Reset number of clock cycles
        dec.w   r5                      ; Decrement number of ms total
        jnz     wait_loop               ; Keep looping if necessary
        ret     

wait_10us:
        mov     #34, r4                 ; Number of clock cycles in 100 us (3324 was divided by 100)
        mov     r4, r6                  ; Get number of inner loop iterations
wait_10us_loop:
        dec.w   r6                      ; Subtract from number of clk cycles.Execution takes 2 clock cycles
        jnz     wait_10us_loop          ; Test for loop termination. Execution takes 2 clock cycles
        mov     r4, r6                  ; Reset number of clock cycles
        dec.w   r5                      ; Decrement number of ms total
        jnz     wait_10us_loop          ; Keep looping if necessary
        ret   
 
        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
