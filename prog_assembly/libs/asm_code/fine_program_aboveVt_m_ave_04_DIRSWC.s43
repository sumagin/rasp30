.include "pmem_defs.asm"
.include "chip_para_debug.asm"
.include "chip_para_FP.asm"

.global main

main:
        mov     #DMEM_250, r1           ; Initialize stack pointer
	mov	#0x5000, r7
	mov	#0, r10			; Initialize time
	mov     #8000, r5             	; Number of ms
init_wait:
        dec.w   r5 
        jnz     init_wait
	mov	#0x0010, &BCSCTL2	; Divide clock 20MHz
	mov	#0x5A80, &WDTCTL	; Watchdog controller 
	dint
	mov	#0x0002, &TUN_MUX
        mov     #0xBE04, &GP_PER_3      ; Vtun_ext = 5V, enable 6V, esd=6v
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
	mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
	mov     #0,    &ROW_SEL
        mov     #0,    &COL_SEL
	mov	r10, @r7
	incd	r7
	mov	r10, @r7
	incd	r7
	mov	#0x0000, r13		;gate_s = 0.6V @ IVDD 2.5V
	call	#block_measure

	mov	#FPA_NUM_DIRSWC, r15
fine_loop_s:
	mov	#0x0000, r13		;gate_s = 0.6V @ IVDD 2.5V
	call	#measure_verify
	call	#Vd_calculate
	call	#fine_inject
        mov     #FP_MEAS_ON, r8         ; 0:skip measurenet 1:measure
	cmp	#0x0000, r8
	jeq	skip_measurement
        mov     #0x3333, @r7	        ; Record Injection 0x3333 
	incd	r7
	mov     r10, @r7	        ; Record time 
	incd	r7
	call	#block_measure
skip_measurement:
        dec.w   r15
        jz      fine_loop_e
	jmp	fine_loop_s
fine_loop_e:

;	mov	#31, r15
	mov	#1, r15
last_measure_loop_s:
	mov     #0x3333, @r7	        ; Record Injection 0x3333 
	incd	r7
	mov     r10, @r7	        ; Record time 
	incd	r7
	mov	#0x0000, r13		;gate_s = 0.6V @ IVDD 2.5V
	call	#block_measure
        dec.w   r15
        jz      last_measure_loop_e
	jmp	last_measure_loop_s
last_measure_loop_e:

	mov	#0xFFFF, @r7		; Data End
	mov	#0x0000, &BCSCTL2	; Divide clock 20MHz
	jmp     end_of_test

fine_inject:
	mov	#0x7000, r11
	mov	@r11, r12		; No. of FGs 
        mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
	mov     #0xBE04, &GP_PER_3    	; ########### VTUN_EXT TO 5V
	mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
    	mov     #0xFFFF, &TUN_MUX       ; Set tunnel mux, <3>:switch <4>:cab <5>:ble
fine_inject_set_s:
	incd	r11
	mov     @r11,    &ROW_SEL
	incd	r11
        mov     @r11,    &COL_SEL
	incd	r11
	incd	r11
	incd	r11
        mov     @r11,    r8		; Read Vd
	cmp	#0x0000, r8
	jeq	fine_inject_skip
	mov	#FPA_GATE_S_DIRSWC, &GATE_S	; gate_s 
	mov	#0x0060, &GATE_US_P	; gate_us_p = ivdd
	mov	#0x0060, &GATE_US_N	; gate_us_n = ivdd
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        mov     #0x0014, &GP_PER_1      ; IVDD to 6.0V, Set vtun_ext = On
	mov     #2, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
        mov     #FPA_VD_GND_DIRSWC, r6    ; 0:Vd table 1:GND
	cmp	#0, r6
	jeq	Jump_Vdtable
        mov 	#0x0026, &DRAIN_CTRL	; gnd
        mov     #FPA_INJ_T_DIRSWC, r5 	; Number of 10us to inject
	call    #wait_10us             	; Call the waiting function
	add     #FPA_INJ_T_DIRSWC, r10 	; Calculate time
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        jmp     drain_pulse_end
Jump_Vdtable:
	mov 	r8, &DRAIN_CTRL	
        mov     #FPA_INJ_T_DIRSWC, r5 	; Number of 10us to inject
	call    #wait_10us             	; Call the waiting function
	add     #FPA_INJ_T_DIRSWC, r10    	; Calculate time
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
drain_pulse_end:
	mov     #1, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
fine_inject_skip:
       	dec.w   r12
        jz      fine_inject_e
 	jmp	fine_inject_set_s
fine_inject_e:
	mov     #0x0004, &GP_PER_1      ; IVDD to 0V, Set vtun_ext = On
	mov     #2, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
	mov     #1, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	mov     #0x0002, &TUN_MUX       ; Set tunnel mux, <3>:switch <4>:cab <5>:ble
	mov	#0x0040, &GATE_US_P	; gate_us_p = gnd
	mov	#0x0040, &GATE_US_N	; gate_us_n = gnd
	mov     #1, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	ret

measure_verify:
	mov	#0x7000, r11
	mov	@r11, r12		; No. of FGs 
	mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
	mov     #0xBE04, &GP_PER_3    	; ########### VTUN_EXT TO 5V
	mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
    	mov     #0x0002, &TUN_MUX       ; Reset tunnel mux (gnd), <3>:switch <4>:cab <5>:ble
measure_verify_s:
	incd	r11
	mov     @r11,    &ROW_SEL
	incd	r11
        mov     @r11,    &COL_SEL
	incd	r11
;	mov	@r11, r8
	incd	r11
	incd	r11
	mov	@r11, r9		; Read Vd
	cmp	#0x0000, r9
	jeq	measure_verify_skip
	mov 	r13, &GATE_S
	mov	#0x0040, &GATE_US_P	; gate_us_p = gnd
	mov	#0x0040, &GATE_US_N	; gate_us_n = gnd
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        mov     #2, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	mov	#0x00A4, &DRAIN_CTRL	; 101 cascode off, no use DAC, i2v mux control=fg_inn;
        mov     #10, r5             	; Number of ms
        call    #wait_ms                ; Call the waiting function

	mov	#4, r14			; # for current measure average 
	mov	#0, r9
measure_v9_average_s:
	mov     #0xB000, &PROG_BITS     ; Set measure_adc high, Toggle the adc counter's clear_n
        mov     #5, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
        mov     #0, &ADC                ; Write counter value into ADC via dummy write
	;mov     &ADC, r9	        ; Get value in counter
	add     &ADC, r9	        ; Get value in counter
	mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
        mov     #10, r5             	; Number of ms
        call    #wait_10us                ; Call the waiting function
	dec.w   r14
        jz      measure_v9_average_e
	jmp	measure_v9_average_s
measure_v9_average_e:
	rrc	r9
	rrc	r9
	bic	#0xc000, r9

	decd	r11
	decd	r11
	mov	@r11, r8
	incd	r11
	incd	r11

	cmp	r8, r9
	jn	status_1
	mov	#0x0000, @r11		; Injection over
	jmp	measure_verify_skip	
status_1:
	decd	r11
	sub	r9, r8
	mov	r8, @r11
	incd	r11
measure_verify_skip:
        dec.w   r12
        jz      measure_verify_e
	jmp	measure_verify_s
measure_verify_e:
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
	ret

Vd_calculate:
	mov	#0x7000, r11
	mov	@r11, r12		; No. of FGs 
Vd_cal_s:
	incd	r11			; @ Row_Sel
	incd	r11			; @ Col_Sel
	incd	r11	
	mov	@r11, r8		; @ Target
	incd	r11	
	mov	@r11, r9		; @ diff_for_Vd2
	incd	r11		
	mov	@r11, r14		; @ Vd 
	cmp	#0x0000, r14
	jeq	No_calculation
	sub	r9, r8			; r8 = r8(target)-r9(diff) = Istart
	sub	#ADC_1nA, r8		; r8 = r8(Istart)-ADC_1nA(1nA) = diff_for_Vd1
        mov     #FPA_VD_A_DIRSWC, r6
	cmp	#0, r8		        ; If r8(Vd1) < 0,
	jge	Jump_r8_0
	mov	#0, r8  		; r8 = 0
Jump_r8_0:
	rrc	r8
        bic     #0x8000, r8
	dec.w   r6
        jnz     Jump_r8_0
        mov     #FPA_VD_B_DIRSWC, r6
Jump_r9_1:
        rrc	r9
        bic     #0x8000, r9
	dec.w   r6
        jnz     Jump_r9_1
	add	#FPA_VD_OS_DIRSWC, r9      ; Vd table offset
        mov     #FPA_VD_SA_DIRSWC, r6      ; Add or Subtraction
	cmp	#0, r6
	jeq	Jump_Sub
        add     r8, r9
        jmp     Add_Sub_end
Jump_Sub:
        sub     r8, r9
Add_Sub_end:
        cmp	#0, r9		        ; If r8(Vd1) < 0,
	jge	Jump_r9_0
	mov	#0, r9  		; r8 = 0
Jump_r9_0:
        rlc	r9
	bic	#0x0001, r9
	add	#0x6800, r9

	decd	r11
	mov	r9, @r11
;	decd	r11
;	mov	r8, @r11
;	incd	r11
	incd	r11

 	mov	@r9, r14
	mov	r14, @r11
No_calculation:
        dec.w   r12
        jz      Vd_cal_e
	jmp	Vd_cal_s
Vd_cal_e:
	ret

block_measure:
	mov	#0x7000, r11
	mov	@r11, r12		; No. of FGs 
	mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
	mov     #0xBE04, &GP_PER_3    	; ########### VTUN_EXT TO 5V
	mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
    	mov     #0x0002, &TUN_MUX       ; Reset tunnel mux (gnd), <3>:switch <4>:cab <5>:ble
block_measure_s:
	incd	r11
	mov     @r11,    &ROW_SEL
	incd	r11
        mov     @r11,    &COL_SEL
	incd	r11
	incd	r11
	incd	r11
	mov 	r13, &GATE_S
	mov	#0x0040, &GATE_US_P	; gate_us_p = gnd
	mov	#0x0040, &GATE_US_N	; gate_us_n = gnd
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        mov     #2, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
	mov	#0x00A4, &DRAIN_CTRL	; 101 cascode off, no use DAC, i2v mux control=fg_inn;
        mov     #10, r5             	; Number of ms
        call    #wait_ms                ; Call the waiting function

	mov	#4, r14			; # for current measure average 
	mov	#0, r9
measure_9_average_s:
	mov     #0xB000, &PROG_BITS     ; Set measure_adc high, Toggle the adc counter's clear_n
        mov     #5, r5             	; Number of ms
	call    #wait_ms                ; Call the waiting function
        mov     #0, &ADC                ; Write counter value into ADC via dummy write
	;mov     &ADC, r9	        ; Get value in counter
	add     &ADC, r9	        ; Get value in counter
	mov     #0x8000, &PROG_BITS     ; PROG = 1, OV_N = don't care, MEAS_ADC = 0, CLEAR_N = 0
        mov     #10, r5             	; Number of ms
        call    #wait_10us                ; Call the waiting function
	dec.w   r14
        jz      measure_9_average_e
	jmp	measure_9_average_s
measure_9_average_e:
	rrc	r9
	rrc	r9
	bic	#0xc000, r9

	mov     r9, @r7			; Get value in counter
	incd	r7
        dec.w   r12
        jz      block_measure_e
	jmp	block_measure_s
block_measure_e:
	mov     #0x0066, &DRAIN_CTRL    ; drain = ivdd, no use DAC, i2v mux control = No connection  
        mov     #0x0024, &GP_PER_1      ; IVDD to 2.5V, Set vtun_ext = On
	ret

wait_ms:
        mov     #3324, r4               ; Number of clock cycles in a ms (chariterized by pulse measure)
        mov     r4, r6                  ; Get number of inner loop iterations
wait_ms_loop:
        dec.w   r6                      ; Subtract from number of clk cycles.Execution takes 2 clock cycles
        jnz     wait_ms_loop            ; Test for loop termination. Execution takes 2 clock cycles
        mov     r4, r6                  ; Reset number of clock cycles
        dec.w   r5                      ; Decrement number of ms total
        jnz     wait_ms_loop            ; Keep looping if necessary
        ret    
 
wait_10us:
        mov     #34, r4                 ; Number of clock cycles in 100 us (3324 was divided by 100)
        mov     r4, r6                  ; Get number of inner loop iterations
wait_10us_loop:
        dec.w   r6                      ; Subtract from number of clk cycles.Execution takes 2 clock cycles
        jnz     wait_10us_loop          ; Test for loop termination. Execution takes 2 clock cycles
        mov     r4, r6                  ; Reset number of clock cycles
        dec.w   r5                      ; Decrement number of ms total
        jnz     wait_10us_loop          ; Keep looping if necessary
        ret   

end_of_test:
	mov	#0x0000, &BCSCTL2
	nop
	br #0xffff

/* ----------------------         INTERRUPT VECTORS  --------------- */
.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
